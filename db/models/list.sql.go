// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: list.sql

package models

import (
	"context"
)

const createList = `-- name: CreateList :exec
INSERT INTO list (id,name,theme_id) VALUES($1,$2,$3)
`

type CreateListParams struct {
	ID      string
	Name    string
	ThemeID int32
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) error {
	_, err := q.db.ExecContext(ctx, createList, arg.ID, arg.Name, arg.ThemeID)
	return err
}

const createTheme = `-- name: CreateTheme :exec
INSERT INTO theme("primary",secondary)
    VALUES($1,$2)
`

type CreateThemeParams struct {
	Primary   string
	Secondary string
}

func (q *Queries) CreateTheme(ctx context.Context, arg CreateThemeParams) error {
	_, err := q.db.ExecContext(ctx, createTheme, arg.Primary, arg.Secondary)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM list WHERE id=$1
`

func (q *Queries) DeleteList(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const findTheme = `-- name: FindTheme :one
SELECT id FROM theme WHERE "primary"=$1 AND secondary=$2
`

type FindThemeParams struct {
	Primary   string
	Secondary string
}

func (q *Queries) FindTheme(ctx context.Context, arg FindThemeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, findTheme, arg.Primary, arg.Secondary)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateList = `-- name: UpdateList :exec
UPDATE list SET id=$1, name=$2, theme_id=$3 
    WHERE id=$1
`

type UpdateListParams struct {
	ID      string
	Name    string
	ThemeID int32
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) error {
	_, err := q.db.ExecContext(ctx, updateList, arg.ID, arg.Name, arg.ThemeID)
	return err
}
