// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: task.sql

package models

import (
	"context"

	"github.com/tabbed/pqtype"
	null "gopkg.in/guregu/null.v4"
)

const checkTaskExist = `-- name: CheckTaskExist :one
SELECT EXISTS(SELECT 1 FROM task WHERE ID =$1)
`

func (q *Queries) CheckTaskExist(ctx context.Context, id string) (bool, error) {
	row := q.queryRow(ctx, q.checkTaskExistStmt, checkTaskExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO task (
    id,
    name,
    subtasks,
    list_id,
    description,
    reminder,
    repeat,
    is_completed
)
VALUES($1,$2,$3,$4,$5,$6,$7,$8)
`

type CreateTaskParams struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Subtasks    pqtype.NullRawMessage `json:"subtasks"`
	ListID      string                `json:"list_id"`
	Description null.String           `json:"description"`
	Reminder    null.Time             `json:"reminder"`
	Repeat      null.String           `json:"repeat"`
	IsCompleted bool                  `json:"is_completed"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.exec(ctx, q.createTaskStmt, createTask,
		arg.ID,
		arg.Name,
		arg.Subtasks,
		arg.ListID,
		arg.Description,
		arg.Reminder,
		arg.Repeat,
		arg.IsCompleted,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
UPDATE task SET is_deleted=true WHERE id=$1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteTaskStmt, deleteTask, id)
	return err
}

const updateTask = `-- name: UpdateTask :execrows
UPDATE task SET
    name=$2,
    subtasks=$3,
    list_id=$4,
    description=$5,
    reminder=$6,
    repeat=$7,
    is_completed=$8
WHERE id=$1
`

type UpdateTaskParams struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Subtasks    pqtype.NullRawMessage `json:"subtasks"`
	ListID      string                `json:"list_id"`
	Description null.String           `json:"description"`
	Reminder    null.Time             `json:"reminder"`
	Repeat      null.String           `json:"repeat"`
	IsCompleted bool                  `json:"is_completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (int64, error) {
	result, err := q.exec(ctx, q.updateTaskStmt, updateTask,
		arg.ID,
		arg.Name,
		arg.Subtasks,
		arg.ListID,
		arg.Description,
		arg.Reminder,
		arg.Repeat,
		arg.IsCompleted,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
