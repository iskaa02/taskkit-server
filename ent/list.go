// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/iskaa02/taskkit-server/ent/list"
	"github.com/iskaa02/taskkit-server/ent/theme"
)

// List is the model entity for the List schema.
type List struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ThemeID holds the value of the "theme_id" field.
	ThemeID int64 `json:"theme_id,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// LastModified holds the value of the "last_modified" field.
	LastModified time.Time `json:"last_modified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListQuery when eager-loading is set.
	Edges ListEdges `json:"edges"`
}

// ListEdges holds the relations/edges for other nodes in the graph.
type ListEdges struct {
	// Theme holds the value of the theme edge.
	Theme *Theme `json:"theme,omitempty"`
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ThemeOrErr returns the Theme value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ListEdges) ThemeOrErr() (*Theme, error) {
	if e.loadedTypes[0] {
		if e.Theme == nil {
			// The edge theme was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: theme.Label}
		}
		return e.Theme, nil
	}
	return nil, &NotLoadedError{edge: "theme"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e ListEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*List) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case list.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case list.FieldThemeID:
			values[i] = new(sql.NullInt64)
		case list.FieldID, list.FieldName:
			values[i] = new(sql.NullString)
		case list.FieldLastModified, list.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type List", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the List fields.
func (l *List) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case list.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case list.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case list.FieldThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_id", values[i])
			} else if value.Valid {
				l.ThemeID = value.Int64
			}
		case list.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				l.IsDeleted = value.Bool
			}
		case list.FieldLastModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified", values[i])
			} else if value.Valid {
				l.LastModified = value.Time
			}
		case list.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTheme queries the "theme" edge of the List entity.
func (l *List) QueryTheme() *ThemeQuery {
	return (&ListClient{config: l.config}).QueryTheme(l)
}

// QueryTask queries the "task" edge of the List entity.
func (l *List) QueryTask() *TaskQuery {
	return (&ListClient{config: l.config}).QueryTask(l)
}

// Update returns a builder for updating this List.
// Note that you need to call List.Unwrap() before calling this method if this List
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *List) Update() *ListUpdateOne {
	return (&ListClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the List entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *List) Unwrap() *List {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: List is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *List) String() string {
	var builder strings.Builder
	builder.WriteString("List(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteString(", theme_id=")
	builder.WriteString(fmt.Sprintf("%v", l.ThemeID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", l.IsDeleted))
	builder.WriteString(", last_modified=")
	builder.WriteString(l.LastModified.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Lists is a parsable slice of List.
type Lists []*List

func (l Lists) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
