// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/iskaa02/taskkit-server/ent/list"
	"github.com/iskaa02/taskkit-server/ent/predicate"
	"github.com/iskaa02/taskkit-server/ent/task"
	"github.com/iskaa02/taskkit-server/ent/theme"
	"github.com/iskaa02/taskkit-server/types"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeList  = "List"
	TypeTask  = "Task"
	TypeTheme = "Theme"
)

// ListMutation represents an operation that mutates the List nodes in the graph.
type ListMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	is_deleted    *bool
	last_modified *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	theme         *int64
	clearedtheme  bool
	task          map[string]struct{}
	removedtask   map[string]struct{}
	clearedtask   bool
	done          bool
	oldValue      func(context.Context) (*List, error)
	predicates    []predicate.List
}

var _ ent.Mutation = (*ListMutation)(nil)

// listOption allows management of the mutation configuration using functional options.
type listOption func(*ListMutation)

// newListMutation creates new mutation for the List entity.
func newListMutation(c config, op Op, opts ...listOption) *ListMutation {
	m := &ListMutation{
		config:        c,
		op:            op,
		typ:           TypeList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withListID sets the ID field of the mutation.
func withListID(id string) listOption {
	return func(m *ListMutation) {
		var (
			err   error
			once  sync.Once
			value *List
		)
		m.oldValue = func(ctx context.Context) (*List, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().List.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withList sets the old List of the mutation.
func withList(node *List) listOption {
	return func(m *ListMutation) {
		m.oldValue = func(context.Context) (*List, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of List entities.
func (m *ListMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ListMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ListMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().List.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ListMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ListMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ListMutation) ResetName() {
	m.name = nil
}

// SetThemeID sets the "theme_id" field.
func (m *ListMutation) SetThemeID(i int64) {
	m.theme = &i
}

// ThemeID returns the value of the "theme_id" field in the mutation.
func (m *ListMutation) ThemeID() (r int64, exists bool) {
	v := m.theme
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeID returns the old "theme_id" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldThemeID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThemeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThemeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeID: %w", err)
	}
	return oldValue.ThemeID, nil
}

// ResetThemeID resets all changes to the "theme_id" field.
func (m *ListMutation) ResetThemeID() {
	m.theme = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *ListMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *ListMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *ListMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetLastModified sets the "last_modified" field.
func (m *ListMutation) SetLastModified(t time.Time) {
	m.last_modified = &t
}

// LastModified returns the value of the "last_modified" field in the mutation.
func (m *ListMutation) LastModified() (r time.Time, exists bool) {
	v := m.last_modified
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModified returns the old "last_modified" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldLastModified(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModified: %w", err)
	}
	return oldValue.LastModified, nil
}

// ResetLastModified resets all changes to the "last_modified" field.
func (m *ListMutation) ResetLastModified() {
	m.last_modified = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ListMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ListMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ListMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (m *ListMutation) ClearTheme() {
	m.clearedtheme = true
}

// ThemeCleared reports if the "theme" edge to the Theme entity was cleared.
func (m *ListMutation) ThemeCleared() bool {
	return m.clearedtheme
}

// ThemeIDs returns the "theme" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ThemeID instead. It exists only for internal usage by the builders.
func (m *ListMutation) ThemeIDs() (ids []int64) {
	if id := m.theme; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTheme resets all changes to the "theme" edge.
func (m *ListMutation) ResetTheme() {
	m.theme = nil
	m.clearedtheme = false
}

// AddTaskIDs adds the "task" edge to the Task entity by ids.
func (m *ListMutation) AddTaskIDs(ids ...string) {
	if m.task == nil {
		m.task = make(map[string]struct{})
	}
	for i := range ids {
		m.task[ids[i]] = struct{}{}
	}
}

// ClearTask clears the "task" edge to the Task entity.
func (m *ListMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *ListMutation) TaskCleared() bool {
	return m.clearedtask
}

// RemoveTaskIDs removes the "task" edge to the Task entity by IDs.
func (m *ListMutation) RemoveTaskIDs(ids ...string) {
	if m.removedtask == nil {
		m.removedtask = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.task, ids[i])
		m.removedtask[ids[i]] = struct{}{}
	}
}

// RemovedTask returns the removed IDs of the "task" edge to the Task entity.
func (m *ListMutation) RemovedTaskIDs() (ids []string) {
	for id := range m.removedtask {
		ids = append(ids, id)
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
func (m *ListMutation) TaskIDs() (ids []string) {
	for id := range m.task {
		ids = append(ids, id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *ListMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
	m.removedtask = nil
}

// Where appends a list predicates to the ListMutation builder.
func (m *ListMutation) Where(ps ...predicate.List) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ListMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (List).
func (m *ListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ListMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, list.FieldName)
	}
	if m.theme != nil {
		fields = append(fields, list.FieldThemeID)
	}
	if m.is_deleted != nil {
		fields = append(fields, list.FieldIsDeleted)
	}
	if m.last_modified != nil {
		fields = append(fields, list.FieldLastModified)
	}
	if m.created_at != nil {
		fields = append(fields, list.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case list.FieldName:
		return m.Name()
	case list.FieldThemeID:
		return m.ThemeID()
	case list.FieldIsDeleted:
		return m.IsDeleted()
	case list.FieldLastModified:
		return m.LastModified()
	case list.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case list.FieldName:
		return m.OldName(ctx)
	case list.FieldThemeID:
		return m.OldThemeID(ctx)
	case list.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case list.FieldLastModified:
		return m.OldLastModified(ctx)
	case list.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown List field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case list.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case list.FieldThemeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeID(v)
		return nil
	case list.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case list.FieldLastModified:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModified(v)
		return nil
	case list.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown List field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ListMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ListMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown List numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown List nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ListMutation) ResetField(name string) error {
	switch name {
	case list.FieldName:
		m.ResetName()
		return nil
	case list.FieldThemeID:
		m.ResetThemeID()
		return nil
	case list.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case list.FieldLastModified:
		m.ResetLastModified()
		return nil
	case list.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown List field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ListMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.theme != nil {
		edges = append(edges, list.EdgeTheme)
	}
	if m.task != nil {
		edges = append(edges, list.EdgeTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ListMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case list.EdgeTheme:
		if id := m.theme; id != nil {
			return []ent.Value{*id}
		}
	case list.EdgeTask:
		ids := make([]ent.Value, 0, len(m.task))
		for id := range m.task {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtask != nil {
		edges = append(edges, list.EdgeTask)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ListMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case list.EdgeTask:
		ids := make([]ent.Value, 0, len(m.removedtask))
		for id := range m.removedtask {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtheme {
		edges = append(edges, list.EdgeTheme)
	}
	if m.clearedtask {
		edges = append(edges, list.EdgeTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ListMutation) EdgeCleared(name string) bool {
	switch name {
	case list.EdgeTheme:
		return m.clearedtheme
	case list.EdgeTask:
		return m.clearedtask
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ListMutation) ClearEdge(name string) error {
	switch name {
	case list.EdgeTheme:
		m.ClearTheme()
		return nil
	}
	return fmt.Errorf("unknown List unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ListMutation) ResetEdge(name string) error {
	switch name {
	case list.EdgeTheme:
		m.ResetTheme()
		return nil
	case list.EdgeTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown List edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	description   *string
	reminder      *time.Time
	repeat        *string
	subtasks      **types.Subtasks
	is_completed  *bool
	is_deleted    *bool
	last_modified *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	list          *string
	clearedlist   bool
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id string) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetListID sets the "list_id" field.
func (m *TaskMutation) SetListID(s string) {
	m.list = &s
}

// ListID returns the value of the "list_id" field in the mutation.
func (m *TaskMutation) ListID() (r string, exists bool) {
	v := m.list
	if v == nil {
		return
	}
	return *v, true
}

// OldListID returns the old "list_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldListID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListID: %w", err)
	}
	return oldValue.ListID, nil
}

// ResetListID resets all changes to the "list_id" field.
func (m *TaskMutation) ResetListID() {
	m.list = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[task.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[task.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, task.FieldDescription)
}

// SetReminder sets the "reminder" field.
func (m *TaskMutation) SetReminder(t time.Time) {
	m.reminder = &t
}

// Reminder returns the value of the "reminder" field in the mutation.
func (m *TaskMutation) Reminder() (r time.Time, exists bool) {
	v := m.reminder
	if v == nil {
		return
	}
	return *v, true
}

// OldReminder returns the old "reminder" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldReminder(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReminder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReminder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReminder: %w", err)
	}
	return oldValue.Reminder, nil
}

// ClearReminder clears the value of the "reminder" field.
func (m *TaskMutation) ClearReminder() {
	m.reminder = nil
	m.clearedFields[task.FieldReminder] = struct{}{}
}

// ReminderCleared returns if the "reminder" field was cleared in this mutation.
func (m *TaskMutation) ReminderCleared() bool {
	_, ok := m.clearedFields[task.FieldReminder]
	return ok
}

// ResetReminder resets all changes to the "reminder" field.
func (m *TaskMutation) ResetReminder() {
	m.reminder = nil
	delete(m.clearedFields, task.FieldReminder)
}

// SetRepeat sets the "repeat" field.
func (m *TaskMutation) SetRepeat(s string) {
	m.repeat = &s
}

// Repeat returns the value of the "repeat" field in the mutation.
func (m *TaskMutation) Repeat() (r string, exists bool) {
	v := m.repeat
	if v == nil {
		return
	}
	return *v, true
}

// OldRepeat returns the old "repeat" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRepeat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepeat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepeat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepeat: %w", err)
	}
	return oldValue.Repeat, nil
}

// ClearRepeat clears the value of the "repeat" field.
func (m *TaskMutation) ClearRepeat() {
	m.repeat = nil
	m.clearedFields[task.FieldRepeat] = struct{}{}
}

// RepeatCleared returns if the "repeat" field was cleared in this mutation.
func (m *TaskMutation) RepeatCleared() bool {
	_, ok := m.clearedFields[task.FieldRepeat]
	return ok
}

// ResetRepeat resets all changes to the "repeat" field.
func (m *TaskMutation) ResetRepeat() {
	m.repeat = nil
	delete(m.clearedFields, task.FieldRepeat)
}

// SetSubtasks sets the "subtasks" field.
func (m *TaskMutation) SetSubtasks(t *types.Subtasks) {
	m.subtasks = &t
}

// Subtasks returns the value of the "subtasks" field in the mutation.
func (m *TaskMutation) Subtasks() (r *types.Subtasks, exists bool) {
	v := m.subtasks
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtasks returns the old "subtasks" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSubtasks(ctx context.Context) (v *types.Subtasks, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubtasks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubtasks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtasks: %w", err)
	}
	return oldValue.Subtasks, nil
}

// ResetSubtasks resets all changes to the "subtasks" field.
func (m *TaskMutation) ResetSubtasks() {
	m.subtasks = nil
}

// SetIsCompleted sets the "is_completed" field.
func (m *TaskMutation) SetIsCompleted(b bool) {
	m.is_completed = &b
}

// IsCompleted returns the value of the "is_completed" field in the mutation.
func (m *TaskMutation) IsCompleted() (r bool, exists bool) {
	v := m.is_completed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCompleted returns the old "is_completed" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldIsCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCompleted: %w", err)
	}
	return oldValue.IsCompleted, nil
}

// ResetIsCompleted resets all changes to the "is_completed" field.
func (m *TaskMutation) ResetIsCompleted() {
	m.is_completed = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *TaskMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *TaskMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *TaskMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetLastModified sets the "last_modified" field.
func (m *TaskMutation) SetLastModified(t time.Time) {
	m.last_modified = &t
}

// LastModified returns the value of the "last_modified" field in the mutation.
func (m *TaskMutation) LastModified() (r time.Time, exists bool) {
	v := m.last_modified
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModified returns the old "last_modified" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldLastModified(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModified: %w", err)
	}
	return oldValue.LastModified, nil
}

// ResetLastModified resets all changes to the "last_modified" field.
func (m *TaskMutation) ResetLastModified() {
	m.last_modified = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearList clears the "list" edge to the List entity.
func (m *TaskMutation) ClearList() {
	m.clearedlist = true
}

// ListCleared reports if the "list" edge to the List entity was cleared.
func (m *TaskMutation) ListCleared() bool {
	return m.clearedlist
}

// ListIDs returns the "list" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ListID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) ListIDs() (ids []string) {
	if id := m.list; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetList resets all changes to the "list" edge.
func (m *TaskMutation) ResetList() {
	m.list = nil
	m.clearedlist = false
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.list != nil {
		fields = append(fields, task.FieldListID)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.reminder != nil {
		fields = append(fields, task.FieldReminder)
	}
	if m.repeat != nil {
		fields = append(fields, task.FieldRepeat)
	}
	if m.subtasks != nil {
		fields = append(fields, task.FieldSubtasks)
	}
	if m.is_completed != nil {
		fields = append(fields, task.FieldIsCompleted)
	}
	if m.is_deleted != nil {
		fields = append(fields, task.FieldIsDeleted)
	}
	if m.last_modified != nil {
		fields = append(fields, task.FieldLastModified)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldName:
		return m.Name()
	case task.FieldListID:
		return m.ListID()
	case task.FieldDescription:
		return m.Description()
	case task.FieldReminder:
		return m.Reminder()
	case task.FieldRepeat:
		return m.Repeat()
	case task.FieldSubtasks:
		return m.Subtasks()
	case task.FieldIsCompleted:
		return m.IsCompleted()
	case task.FieldIsDeleted:
		return m.IsDeleted()
	case task.FieldLastModified:
		return m.LastModified()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldListID:
		return m.OldListID(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldReminder:
		return m.OldReminder(ctx)
	case task.FieldRepeat:
		return m.OldRepeat(ctx)
	case task.FieldSubtasks:
		return m.OldSubtasks(ctx)
	case task.FieldIsCompleted:
		return m.OldIsCompleted(ctx)
	case task.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case task.FieldLastModified:
		return m.OldLastModified(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldListID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListID(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldReminder:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReminder(v)
		return nil
	case task.FieldRepeat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepeat(v)
		return nil
	case task.FieldSubtasks:
		v, ok := value.(*types.Subtasks)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtasks(v)
		return nil
	case task.FieldIsCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCompleted(v)
		return nil
	case task.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case task.FieldLastModified:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModified(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldDescription) {
		fields = append(fields, task.FieldDescription)
	}
	if m.FieldCleared(task.FieldReminder) {
		fields = append(fields, task.FieldReminder)
	}
	if m.FieldCleared(task.FieldRepeat) {
		fields = append(fields, task.FieldRepeat)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldDescription:
		m.ClearDescription()
		return nil
	case task.FieldReminder:
		m.ClearReminder()
		return nil
	case task.FieldRepeat:
		m.ClearRepeat()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldListID:
		m.ResetListID()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldReminder:
		m.ResetReminder()
		return nil
	case task.FieldRepeat:
		m.ResetRepeat()
		return nil
	case task.FieldSubtasks:
		m.ResetSubtasks()
		return nil
	case task.FieldIsCompleted:
		m.ResetIsCompleted()
		return nil
	case task.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case task.FieldLastModified:
		m.ResetLastModified()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.list != nil {
		edges = append(edges, task.EdgeList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeList:
		if id := m.list; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlist {
		edges = append(edges, task.EdgeList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeList:
		return m.clearedlist
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeList:
		m.ClearList()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeList:
		m.ResetList()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// ThemeMutation represents an operation that mutates the Theme nodes in the graph.
type ThemeMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	primary       *string
	secondary     *string
	clearedFields map[string]struct{}
	list          map[string]struct{}
	removedlist   map[string]struct{}
	clearedlist   bool
	done          bool
	oldValue      func(context.Context) (*Theme, error)
	predicates    []predicate.Theme
}

var _ ent.Mutation = (*ThemeMutation)(nil)

// themeOption allows management of the mutation configuration using functional options.
type themeOption func(*ThemeMutation)

// newThemeMutation creates new mutation for the Theme entity.
func newThemeMutation(c config, op Op, opts ...themeOption) *ThemeMutation {
	m := &ThemeMutation{
		config:        c,
		op:            op,
		typ:           TypeTheme,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThemeID sets the ID field of the mutation.
func withThemeID(id int64) themeOption {
	return func(m *ThemeMutation) {
		var (
			err   error
			once  sync.Once
			value *Theme
		)
		m.oldValue = func(ctx context.Context) (*Theme, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Theme.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTheme sets the old Theme of the mutation.
func withTheme(node *Theme) themeOption {
	return func(m *ThemeMutation) {
		m.oldValue = func(context.Context) (*Theme, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThemeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThemeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Theme entities.
func (m *ThemeMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThemeMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ThemeMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Theme.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrimary sets the "primary" field.
func (m *ThemeMutation) SetPrimary(s string) {
	m.primary = &s
}

// Primary returns the value of the "primary" field in the mutation.
func (m *ThemeMutation) Primary() (r string, exists bool) {
	v := m.primary
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimary returns the old "primary" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldPrimary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrimary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrimary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimary: %w", err)
	}
	return oldValue.Primary, nil
}

// ResetPrimary resets all changes to the "primary" field.
func (m *ThemeMutation) ResetPrimary() {
	m.primary = nil
}

// SetSecondary sets the "secondary" field.
func (m *ThemeMutation) SetSecondary(s string) {
	m.secondary = &s
}

// Secondary returns the value of the "secondary" field in the mutation.
func (m *ThemeMutation) Secondary() (r string, exists bool) {
	v := m.secondary
	if v == nil {
		return
	}
	return *v, true
}

// OldSecondary returns the old "secondary" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldSecondary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecondary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecondary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecondary: %w", err)
	}
	return oldValue.Secondary, nil
}

// ClearSecondary clears the value of the "secondary" field.
func (m *ThemeMutation) ClearSecondary() {
	m.secondary = nil
	m.clearedFields[theme.FieldSecondary] = struct{}{}
}

// SecondaryCleared returns if the "secondary" field was cleared in this mutation.
func (m *ThemeMutation) SecondaryCleared() bool {
	_, ok := m.clearedFields[theme.FieldSecondary]
	return ok
}

// ResetSecondary resets all changes to the "secondary" field.
func (m *ThemeMutation) ResetSecondary() {
	m.secondary = nil
	delete(m.clearedFields, theme.FieldSecondary)
}

// AddListIDs adds the "list" edge to the List entity by ids.
func (m *ThemeMutation) AddListIDs(ids ...string) {
	if m.list == nil {
		m.list = make(map[string]struct{})
	}
	for i := range ids {
		m.list[ids[i]] = struct{}{}
	}
}

// ClearList clears the "list" edge to the List entity.
func (m *ThemeMutation) ClearList() {
	m.clearedlist = true
}

// ListCleared reports if the "list" edge to the List entity was cleared.
func (m *ThemeMutation) ListCleared() bool {
	return m.clearedlist
}

// RemoveListIDs removes the "list" edge to the List entity by IDs.
func (m *ThemeMutation) RemoveListIDs(ids ...string) {
	if m.removedlist == nil {
		m.removedlist = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.list, ids[i])
		m.removedlist[ids[i]] = struct{}{}
	}
}

// RemovedList returns the removed IDs of the "list" edge to the List entity.
func (m *ThemeMutation) RemovedListIDs() (ids []string) {
	for id := range m.removedlist {
		ids = append(ids, id)
	}
	return
}

// ListIDs returns the "list" edge IDs in the mutation.
func (m *ThemeMutation) ListIDs() (ids []string) {
	for id := range m.list {
		ids = append(ids, id)
	}
	return
}

// ResetList resets all changes to the "list" edge.
func (m *ThemeMutation) ResetList() {
	m.list = nil
	m.clearedlist = false
	m.removedlist = nil
}

// Where appends a list predicates to the ThemeMutation builder.
func (m *ThemeMutation) Where(ps ...predicate.Theme) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ThemeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Theme).
func (m *ThemeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThemeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.primary != nil {
		fields = append(fields, theme.FieldPrimary)
	}
	if m.secondary != nil {
		fields = append(fields, theme.FieldSecondary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThemeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case theme.FieldPrimary:
		return m.Primary()
	case theme.FieldSecondary:
		return m.Secondary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThemeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case theme.FieldPrimary:
		return m.OldPrimary(ctx)
	case theme.FieldSecondary:
		return m.OldSecondary(ctx)
	}
	return nil, fmt.Errorf("unknown Theme field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case theme.FieldPrimary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimary(v)
		return nil
	case theme.FieldSecondary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecondary(v)
		return nil
	}
	return fmt.Errorf("unknown Theme field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThemeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThemeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Theme numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThemeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(theme.FieldSecondary) {
		fields = append(fields, theme.FieldSecondary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThemeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThemeMutation) ClearField(name string) error {
	switch name {
	case theme.FieldSecondary:
		m.ClearSecondary()
		return nil
	}
	return fmt.Errorf("unknown Theme nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThemeMutation) ResetField(name string) error {
	switch name {
	case theme.FieldPrimary:
		m.ResetPrimary()
		return nil
	case theme.FieldSecondary:
		m.ResetSecondary()
		return nil
	}
	return fmt.Errorf("unknown Theme field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThemeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.list != nil {
		edges = append(edges, theme.EdgeList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThemeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case theme.EdgeList:
		ids := make([]ent.Value, 0, len(m.list))
		for id := range m.list {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThemeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlist != nil {
		edges = append(edges, theme.EdgeList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThemeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case theme.EdgeList:
		ids := make([]ent.Value, 0, len(m.removedlist))
		for id := range m.removedlist {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThemeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlist {
		edges = append(edges, theme.EdgeList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThemeMutation) EdgeCleared(name string) bool {
	switch name {
	case theme.EdgeList:
		return m.clearedlist
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThemeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Theme unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThemeMutation) ResetEdge(name string) error {
	switch name {
	case theme.EdgeList:
		m.ResetList()
		return nil
	}
	return fmt.Errorf("unknown Theme edge %s", name)
}
