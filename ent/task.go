// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/iskaa02/taskkit-server/ent/list"
	"github.com/iskaa02/taskkit-server/ent/task"
	"github.com/iskaa02/taskkit-server/types"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ListID holds the value of the "list_id" field.
	ListID string `json:"list_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Reminder holds the value of the "reminder" field.
	Reminder time.Time `json:"reminder,omitempty"`
	// Repeat holds the value of the "repeat" field.
	Repeat string `json:"repeat,omitempty"`
	// Subtasks holds the value of the "subtasks" field.
	Subtasks *types.Subtasks `json:"subtasks,omitempty"`
	// IsCompleted holds the value of the "is_completed" field.
	IsCompleted bool `json:"is_completed,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// LastModified holds the value of the "last_modified" field.
	LastModified time.Time `json:"last_modified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges TaskEdges `json:"edges"`
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// List holds the value of the list edge.
	List *List `json:"list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ListOrErr returns the List value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) ListOrErr() (*List, error) {
	if e.loadedTypes[0] {
		if e.List == nil {
			// The edge list was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: list.Label}
		}
		return e.List, nil
	}
	return nil, &NotLoadedError{edge: "list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldIsCompleted, task.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case task.FieldID, task.FieldName, task.FieldListID, task.FieldDescription, task.FieldRepeat:
			values[i] = new(sql.NullString)
		case task.FieldReminder, task.FieldLastModified, task.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case task.FieldSubtasks:
			values[i] = new(types.Subtasks)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldListID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field list_id", values[i])
			} else if value.Valid {
				t.ListID = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldReminder:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reminder", values[i])
			} else if value.Valid {
				t.Reminder = value.Time
			}
		case task.FieldRepeat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repeat", values[i])
			} else if value.Valid {
				t.Repeat = value.String
			}
		case task.FieldSubtasks:
			if value, ok := values[i].(*types.Subtasks); !ok {
				return fmt.Errorf("unexpected type %T for field subtasks", values[i])
			} else if value != nil {
				t.Subtasks = value
			}
		case task.FieldIsCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_completed", values[i])
			} else if value.Valid {
				t.IsCompleted = value.Bool
			}
		case task.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				t.IsDeleted = value.Bool
			}
		case task.FieldLastModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified", values[i])
			} else if value.Valid {
				t.LastModified = value.Time
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryList queries the "list" edge of the Task entity.
func (t *Task) QueryList() *ListQuery {
	return (&TaskClient{config: t.config}).QueryList(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", list_id=")
	builder.WriteString(t.ListID)
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", reminder=")
	builder.WriteString(t.Reminder.Format(time.ANSIC))
	builder.WriteString(", repeat=")
	builder.WriteString(t.Repeat)
	builder.WriteString(", subtasks=")
	builder.WriteString(fmt.Sprintf("%v", t.Subtasks))
	builder.WriteString(", is_completed=")
	builder.WriteString(fmt.Sprintf("%v", t.IsCompleted))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDeleted))
	builder.WriteString(", last_modified=")
	builder.WriteString(t.LastModified.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
