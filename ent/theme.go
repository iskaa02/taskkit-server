// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/iskaa02/taskkit-server/ent/theme"
	"gopkg.in/guregu/null.v4"
)

// Theme is the model entity for the Theme schema.
type Theme struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Primary holds the value of the "primary" field.
	Primary string `json:"primary,omitempty"`
	// Secondary holds the value of the "secondary" field.
	Secondary null.String `json:"secondary,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThemeQuery when eager-loading is set.
	Edges ThemeEdges `json:"edges"`
}

// ThemeEdges holds the relations/edges for other nodes in the graph.
type ThemeEdges struct {
	// List holds the value of the list edge.
	List []*List `json:"list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ListOrErr returns the List value or an error if the edge
// was not loaded in eager-loading.
func (e ThemeEdges) ListOrErr() ([]*List, error) {
	if e.loadedTypes[0] {
		return e.List, nil
	}
	return nil, &NotLoadedError{edge: "list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Theme) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case theme.FieldSecondary:
			values[i] = new(null.String)
		case theme.FieldID:
			values[i] = new(sql.NullInt64)
		case theme.FieldPrimary:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Theme", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Theme fields.
func (t *Theme) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case theme.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case theme.FieldPrimary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary", values[i])
			} else if value.Valid {
				t.Primary = value.String
			}
		case theme.FieldSecondary:
			if value, ok := values[i].(*null.String); !ok {
				return fmt.Errorf("unexpected type %T for field secondary", values[i])
			} else if value != nil {
				t.Secondary = *value
			}
		}
	}
	return nil
}

// QueryList queries the "list" edge of the Theme entity.
func (t *Theme) QueryList() *ListQuery {
	return (&ThemeClient{config: t.config}).QueryList(t)
}

// Update returns a builder for updating this Theme.
// Note that you need to call Theme.Unwrap() before calling this method if this Theme
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Theme) Update() *ThemeUpdateOne {
	return (&ThemeClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Theme entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Theme) Unwrap() *Theme {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Theme is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Theme) String() string {
	var builder strings.Builder
	builder.WriteString("Theme(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", primary=")
	builder.WriteString(t.Primary)
	builder.WriteString(", secondary=")
	builder.WriteString(fmt.Sprintf("%v", t.Secondary))
	builder.WriteByte(')')
	return builder.String()
}

// Themes is a parsable slice of Theme.
type Themes []*Theme

func (t Themes) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
