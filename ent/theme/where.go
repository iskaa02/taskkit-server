// Code generated by entc, DO NOT EDIT.

package theme

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/iskaa02/taskkit-server/ent/predicate"
	"gopkg.in/guregu/null.v4"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Primary applies equality check predicate on the "primary" field. It's identical to PrimaryEQ.
func Primary(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimary), v))
	})
}

// Secondary applies equality check predicate on the "secondary" field. It's identical to SecondaryEQ.
func Secondary(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondary), v))
	})
}

// PrimaryEQ applies the EQ predicate on the "primary" field.
func PrimaryEQ(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimary), v))
	})
}

// PrimaryNEQ applies the NEQ predicate on the "primary" field.
func PrimaryNEQ(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimary), v))
	})
}

// PrimaryIn applies the In predicate on the "primary" field.
func PrimaryIn(vs ...string) predicate.Theme {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrimary), v...))
	})
}

// PrimaryNotIn applies the NotIn predicate on the "primary" field.
func PrimaryNotIn(vs ...string) predicate.Theme {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrimary), v...))
	})
}

// PrimaryGT applies the GT predicate on the "primary" field.
func PrimaryGT(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimary), v))
	})
}

// PrimaryGTE applies the GTE predicate on the "primary" field.
func PrimaryGTE(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimary), v))
	})
}

// PrimaryLT applies the LT predicate on the "primary" field.
func PrimaryLT(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimary), v))
	})
}

// PrimaryLTE applies the LTE predicate on the "primary" field.
func PrimaryLTE(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimary), v))
	})
}

// PrimaryContains applies the Contains predicate on the "primary" field.
func PrimaryContains(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrimary), v))
	})
}

// PrimaryHasPrefix applies the HasPrefix predicate on the "primary" field.
func PrimaryHasPrefix(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrimary), v))
	})
}

// PrimaryHasSuffix applies the HasSuffix predicate on the "primary" field.
func PrimaryHasSuffix(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrimary), v))
	})
}

// PrimaryEqualFold applies the EqualFold predicate on the "primary" field.
func PrimaryEqualFold(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrimary), v))
	})
}

// PrimaryContainsFold applies the ContainsFold predicate on the "primary" field.
func PrimaryContainsFold(v string) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrimary), v))
	})
}

// SecondaryEQ applies the EQ predicate on the "secondary" field.
func SecondaryEQ(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondary), v))
	})
}

// SecondaryNEQ applies the NEQ predicate on the "secondary" field.
func SecondaryNEQ(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecondary), v))
	})
}

// SecondaryIn applies the In predicate on the "secondary" field.
func SecondaryIn(vs ...null.String) predicate.Theme {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecondary), v...))
	})
}

// SecondaryNotIn applies the NotIn predicate on the "secondary" field.
func SecondaryNotIn(vs ...null.String) predicate.Theme {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Theme(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecondary), v...))
	})
}

// SecondaryGT applies the GT predicate on the "secondary" field.
func SecondaryGT(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecondary), v))
	})
}

// SecondaryGTE applies the GTE predicate on the "secondary" field.
func SecondaryGTE(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecondary), v))
	})
}

// SecondaryLT applies the LT predicate on the "secondary" field.
func SecondaryLT(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecondary), v))
	})
}

// SecondaryLTE applies the LTE predicate on the "secondary" field.
func SecondaryLTE(v null.String) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecondary), v))
	})
}

// SecondaryIsNil applies the IsNil predicate on the "secondary" field.
func SecondaryIsNil() predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSecondary)))
	})
}

// SecondaryNotNil applies the NotNil predicate on the "secondary" field.
func SecondaryNotNil() predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSecondary)))
	})
}

// HasList applies the HasEdge predicate on the "list" edge.
func HasList() predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ListTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ListTable, ListColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasListWith applies the HasEdge predicate on the "list" edge with a given conditions (other predicates).
func HasListWith(preds ...predicate.List) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ListInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ListTable, ListColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Theme) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Theme) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Theme) predicate.Theme {
	return predicate.Theme(func(s *sql.Selector) {
		p(s.Not())
	})
}
